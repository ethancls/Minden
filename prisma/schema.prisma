generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}


// NextAuth models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Local auth
  passwordHash  String?
  locale        String     @default("en")
  role          Role       @default(USER)
  primaryProvider String    @default("LOCAL")
  // MFA
  totpSecret    String?
  mfaEnabled    Boolean    @default(false)

  accounts      Account[]
  sessions      Session[]

  // Tenancy
  tenants       TenantMember[]
  tenantsCreated Tenant[]   @relation("TenantCreatedBy")

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
// Removed Pill/Category/Favorite models

// Multi-tenant honeypot models

model Tenant {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  createdById String
  createdBy   User            @relation("TenantCreatedBy", fields: [createdById], references: [id])
  members     TenantMember[]
  machines    Machine[]
  tokens      AgentToken[]    @relation("TenantAgentTokens")
  status      TenantStatus    @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum TenantStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum TenantRole {
  OWNER
  ADMIN
  MEMBER
}

model TenantMember {
  tenantId String
  userId   String
  role     TenantRole @default(MEMBER)
  joinedAt DateTime   @default(now())
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tenantId, userId])
  @@index([userId])
}

enum MachineStatus {
  ONLINE
  OFFLINE
}

model Machine {
  id              String         @id @default(cuid())
  tenantId        String
  name            String
  hostname        String?
  ip              String?
  status          MachineStatus  @default(OFFLINE)
  agentVersion    String?
  lastHeartbeatAt DateTime?
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  services        Service[]
  logs            LogEvent[]
  alerts          Alert[]
  tokens          AgentToken[]
  desiredServices String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([tenantId])
}

model AgentToken {
  id        String   @id @default(cuid())
  tenantId  String
  machineId String?
  name      String
  tokenHash String?  @unique
  lastUsedAt DateTime?
  createdAt DateTime @default(now())
  tenant    Tenant   @relation("TenantAgentTokens", fields: [tenantId], references: [id], onDelete: Cascade)
  machine   Machine? @relation(fields: [machineId], references: [id])

  @@index([tenantId])
  @@index([machineId])
}

enum ServiceStatus {
  RUNNING
  STOPPED
  UNKNOWN
}

model Service {
  id        String        @id @default(cuid())
  machineId String
  name      String
  port      Int?
  protocol  String?
  status    ServiceStatus @default(UNKNOWN)
  meta      Json?
  machine   Machine       @relation(fields: [machineId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([machineId])
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model LogEvent {
  id        String   @id @default(cuid())
  machineId String
  level     LogLevel @default(INFO)
  source    String   @default("AGENT")
  message   String
  payload   Json?
  ts        DateTime @default(now())
  machine   Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, ts])
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Alert {
  id        String        @id @default(cuid())
  machineId String
  severity  AlertSeverity @default(MEDIUM)
  title     String
  description String
  createdAt DateTime      @default(now())
  resolvedAt DateTime?
  machine   Machine       @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, createdAt])
}

// System settings (key/value), configurable via admin UI
model Setting {
  key       String   @id
  value     String
  isSecret  Boolean  @default(false)
  updatedAt DateTime @updatedAt
}
